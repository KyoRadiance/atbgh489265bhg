{
  "imageDecryptEval": "const pageLinks = new Array();\n\n// Buscar diferentes patrones comunes en readcomiconline\nconst patterns = [\n  /var\\s+(_[^\\s=]+mvn)\\s*(?:=\\s*[^;]+)?\\s*;/,\n  /var\\s+(_[^\\s=]+img)\\s*(?:=\\s*[^;]+)?\\s*/,\n  /var\\s+(_[^\\s=]+pic)\\s*(?:=\\s*[^;]+)?\\s*/,\n  /var\\s+(_[^\\s=]+src)\\s*(?:=\\s*[^;]+)?\\s*/\n];\n\nlet varName = null;\nfor (const pattern of patterns) {\n  const match = _encryptedString.match(pattern);\n  if (match) {\n    varName = match[1];\n    break;\n  }\n}\n\nif (varName) {\n  const baseName = varName.substring(0, 8);\n  \n  // Múltiples patrones de búsqueda para readcomiconline\n  const pushPatterns = [\n    new RegExp(`(\\\\b${baseName}\\\\s*\\\\.push\\\\(\\\\s*['\"])([^'\"]+)(['\"]\\\\s*\\\\))`, 'g'),\n    new RegExp(`(\\\\b${baseName}\\\\s*=\\\\s*\\\\[)([^\\]]+)(\\\\])`, 'g'),\n    new RegExp(`(\\\\b${baseName}\\\\s*\\\\+=\\\\s*['\"])([^'\"]+)(['\"])`, 'g')\n  ];\n  \n  for (const pattern of pushPatterns) {\n    const matches = [..._encryptedString.matchAll(pattern)];\n    matches.forEach((match) => {\n      if (match[2]) {\n        const links = match[2].split(',').map(link => {\n          return link.trim().replace(/^['\"]|['\"]$/g, '');\n        });\n        links.forEach(link => {\n          if (link) pageLinks.push(decryptReadComicOnlineLink(link));\n        });\n      }\n    });\n  }\n}\n\n// Función específica para readcomiconline.li\nfunction decryptReadComicOnlineLink(encryptedUrl) {\n  let url = encryptedUrl;\n  \n  // Patrones comunes de ofuscación en readcomiconline\n  const replacementPatterns = [\n    { pattern: /\\w{5}__\\w{3}__/g, replacement: 'g' },\n    { pattern: /\\w{2}__\\w{6}_/g, replacement: 'a' },\n    { pattern: /b/g, replacement: 'pw_.g28x' },\n    { pattern: /h/g, replacement: 'd2pr.x_27' },\n    { pattern: /pw_.g28x/g, replacement: 'b' },\n    { pattern: /d2pr.x_27/g, replacement: 'h' },\n    // Nuevos patrones para readcomiconline\n    { pattern: /img\\d+/g, replacement: 'image' },\n    { pattern: /cdn\\d+/g, replacement: 'static' }\n  ];\n  \n  replacementPatterns.forEach(rp => {\n    url = url.replace(rp.pattern, rp.replacement);\n  });\n  \n  // Manejar URLs base64 comunes\n  if (url.includes('base64') || (url.length % 4 === 0 && /^[A-Za-z0-9+/]+=*$/.test(url))) {\n    try {\n      url = atob(url);\n    } catch (e) {\n      // Si no es base64 válido, continuar\n    }\n  }\n  \n  // Manejar URLs ofuscadas con caracteres especiales\n  if (url.includes('\\\\x') || url.includes('\\\\u')) {\n    try {\n      url = url.replace(/\\\\x([0-9A-Fa-f]{2})/g, (match, hex) => {\n        return String.fromCharCode(parseInt(hex, 16));\n      });\n    } catch (e) {}\n  }\n  \n  // Asegurar que la URL sea válida\n  if (!url.startsWith('http')) {\n    // Si es una ruta relativa, construir URL completa\n    if (url.startsWith('/')) {\n      url = 'https://readcomiconline.li' + url;\n    } else if (url.startsWith('./')) {\n      url = 'https://readcomiconline.li/comic' + url.substring(1);\n    }\n  }\n  \n  return url;\n}\n\n// Función atob mejorada\nfunction atob(str) {\n  try {\n    const base64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n    let output = \"\";\n    let buffer = 0;\n    let bits = 0;\n    \n    for (let i = 0; i < str.length; i++) {\n      const char = str[i];\n      const index = base64.indexOf(char);\n      \n      if (index === -1) {\n        // Carácter no base64, devolver string original\n        return str;\n      }\n      \n      buffer = (buffer << 6) | index;\n      bits += 6;\n      \n      if (bits >= 8) {\n        bits -= 8;\n        output += String.fromCharCode((buffer >> bits) & 0xFF);\n      }\n    }\n    \n    return output;\n  } catch (e) {\n    return str;\n  }\n}\n\nJSON.stringify(pageLinks.filter(link => link && link.includes('.')));",
  "postDecryptEval": "// Post-procesamiento para readcomiconline\nif (pageLinks && pageLinks.length > 0) {\n  // Filtrar y validar enlaces\n  pageLinks = pageLinks.filter(link => {\n    return link && \n           link.startsWith('http') && \n           (link.includes('.jpg') || link.includes('.png') || link.includes('.jpeg') || link.includes('.gif'));\n  });\n  \n  // Añadir headers de referer si es necesario\n  pageLinks = pageLinks.map(link => {\n    return {\n      url: link,\n      headers: {\n        'Referer': 'https://readcomiconline.li/',\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\n      }\n    };\n  });\n}\n\nJSON.stringify(pageLinks);",
  "shouldVerifyLinks": true,
  "additionalHeaders": {\n    \"Referer\": \"https://readcomiconline.li/\",\n    \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36\"\n  },\n  "timeout": 10000\n}

  